% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/model_fit.R
\name{ts.model.fit}
\alias{ts.model.autofit}
\alias{ts.model.fit}
\alias{ts.model.refit}
\title{Generic Time Series Model Fit for Package Models}
\usage{
ts.model.fit(y, ts.model.type = c("arfima", "arima", "bats", "ets", "nnetar",
  "stlm", "tbats", "tslm"), ...)

ts.model.refit(y, model, ...)

ts.model.autofit(y, lambda = optimize.lambda(y), alpha = 0.05,
  split = 0.2, return.all.models = FALSE, ts.model.type = c("arfima",
  "arima", "bats", "ets", "nnetar", "stlm", "tbats", "tslm"), ...)
}
\arguments{
\item{y}{\code{ts}. Univariate Time Series}

\item{ts.model.type}{character. Name of model function from package.}

\item{...}{additional keyword arguments provided to `ts.model.type` function.}

\item{model}{\code{tsm} object. Model which was fit in call to
\code{\link[forecastR]{ts.model.fit}}}

\item{lambda}{list of values to pass to \code{lambda} values}

\item{alpha}{numeric. significance threshold for \code{\link[forecast]{dm.test}}
which determines if transformation makes for an improved model}

\item{split}{numeric. parameter passed to \code{\link[forecastR]{ts.split}}}

\item{return.all.models}{logical. controls if only best in sample fit is returned
or if all models are returned}
}
\value{
\code{tsm} object, with subspecialization determined by `ts.model.type`
argument.

\code{tsm} object, with subspecialization determined by `ts.model.type`
argument.
}
\description{
Generic Time Series Model Fit for Package Models

Update Generic Time Series Model Fit for Package Models

Autofit Time Series models attempting multiple standardized transformations
}
\section{Functions}{
\itemize{
\item \code{ts.model.refit}: Update Time Series Model

\item \code{ts.model.autofit}: Autofit Time Series Model
}}
\examples{
library(forecastR)
data('AirPassengers', package = 'datasets')

ap.split <- ts.split(AirPassengers)

mf <- ts.model.fit(ap.split$in.sample, ts.model.type = 'arima')
mf.fcst <- forecast(mf, length(ap.split$out.of.sample))
summary(mf)
coef(mf)

autoplot(resid(mf))

vals <- window(cbind(Data = ap.split$data, Forecast.Mean = mf.fcst$mean),
    start = c(1958,1))
suppressWarnings(plot(vals, plot.type="single", col=1:2))
library(forecastR)
data('AirPassengers', package = 'datasets')

ap.split <- ts.split(AirPassengers)

mf <- ts.model.autofit(ap.split$in.sample, ts.model.type = 'arima', return.all.models = FALSE)
mf <- ts.model.refit(ap.split$in.sample, mf)
mf.fcst <- forecast(mf, length(ap.split$out.of.sample))
print(mf.fcst)

vals <- cbind(Data = ap.split$data, Forecast.Mean = mf.fcst$mean)
suppressWarnings(plot(window(vals, start = c(1958,1)), plot.type="single", col=1:ncol(vals)))

mf2 <- ts.model.refit(ap.split$data, mf)
mf2.fcst <- forecast(mf2, 24)
summary(mf2)

vals <- cbind(Data = ap.split$data, In.Sample.Fcst = mf.fcst$mean,
              Out.Of.Sample.Fcst = mf2.fcst$mean)
suppressWarnings(plot(window(vals, start = c(1958,1)), plot.type="single", col=1:ncol(vals)))

coef(mf) ==  coef(mf2)
library(ggplot2)
library(forecastR)
data('AirPassengers', package = 'datasets')

ap.split <- ts.split(AirPassengers)

mf <- mf.fcst <- list()

mf <- ts.model.autofit(ap.split$in.sample, ts.model.type = 'arima')

for (i in 1:length(mf))
{
  print(i)
  print(mf[[i]])
  mf.fcst[[i]] <- forecast(mf[[i]], length(ap.split$out.of.sample))
}

vals <- do.call(cbind, lapply(mf.fcst, function(x) { x$mean }))
errs <- vals - ap.split$out.of.sample

vals <- cbind(vals, ap.split$data)
colnames(vals) <- c(1:length(mf.fcst), "Data")
autoplot(window(vals, start = c(1958,1)), na.rm=TRUE)

colnames(errs) <- 1:4
autoplot(errs)

abs.errs <- abs(errs)
autoplot(abs.errs)

cum.errs <- as.ts(apply(errs, 2, cumsum))
tsp(cum.errs) <- tsp(cum.errs)
autoplot(cum.errs)
}
\seealso{
\code{\link[forecastR]{arima}} \code{\link[forecastR]{arfima}}
  \code{\link[forecastR]{bats}} \code{\link[forecastR]{ets}}
  \code{\link[forecastR]{nnetar}} \code{\link[forecastR]{tbats}}
  \code{\link[forecast]{auto.arima}} \code{\link[forecast]{Arima}}
  \code{\link[forecast]{arfima}} \code{\link[forecast]{bats}}
  \code{\link[forecast]{ets}} \code{\link[forecast]{nnetar}}
  \code{\link[forecast]{tbats}}

\code{\link[forecastR]{ts.model.fit}}
}


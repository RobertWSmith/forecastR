% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/multimodel_fit.R
\name{ts.multimodel.fit}
\alias{ts.multimodel.fit}
\title{Multi- Time Series Model Fit}
\usage{
ts.multimodel.fit(y, split = 0.2, boot.reps = NULL,
  ts.model.types = c("arfima", "arima", "bats", "ets", "nnetar", "stlm",
  "tbats", "tslm"),
  freq.multiple = package_options("short.ts.frequency.multiple"), ...)
}
\arguments{
\item{y}{\code{\link[stats]{ts}} object. univariate time series}

\item{split}{numeric. Determines in/out-sample proportions. If NULL, no split
is applied.}

\item{boot.reps}{integer. Optional parameter, if provided model is fit against
the mean of `boot.reps` number of bootstrap replicates. Can help smooth
excess volatility}

\item{ts.model.types}{character vector. name of function returing \code{tsm}
model object}

\item{freq.multiple}{numeric. Multiple of the time series' frequency which
determines if the provided time series is short. If short, `ts.model.types`
are selected from a limited list.}

\item{...}{extra arguments for `ts.model.type`}
}
\description{
Fits all models in `ts.model.types`, with the addition of providing a naive
forecast, a sample mean forecast and fitting a theta model forecast. Relative
Error returned is defined as `error <- estimate - actual`.
}
\examples{
library(ggplot2)
library(forecastR)
data('AirPassengers', package = 'datasets')
ap.split <- ts.split(AirPassengers, split = 24)
in.sample <- ap.split$in.sample
mf <- ts.multimodel.fit(in.sample)
for (nm in names(mf))
{
  print(mf[[nm]])
}
}
\seealso{
\code{\link[forecast]{naive}} \code{\link[forecast]{meanf}}
  \code{\link[forecast]{thetaf}} \code{\link[meboot]{meboot}}
}

